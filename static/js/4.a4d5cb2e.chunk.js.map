{"version":3,"sources":["components/Common/FormsControls/FormsControl.module.css","utils/validators/validator.ts","components/Common/FormsControls/FormsControls.tsx","hok/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Posts.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","requiredField","value","maxLengthCreator","maxLength","length","FormControl","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","component","validate","text","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","to","React","connect","ProfileStatusWithHooks","status","dispatch","useDispatch","useState","editMode","setEditMode","setValue","useEffect","activateMode","onDoubleClick","type","onChange","e","currentTarget","autoFocus","onBlur","updateStatusTC","ProfileInfo","profile","discriptionBlock","src","photos","large","alt","Preloader","Post","item","message","likeCounts","MyPosts","memo","console","log","postsElements","posts","map","p","likesCount","id","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","reduxForm","form","handleSubmit","Field","MyPostsContainer","profilePage","addPostAC","Profile","ProfileContainer","userId","match","params","authorizedUserId","getUserProfile","getStatusTC","compose","setUserProfile","withRouter"],"mappings":"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","file":"static/js/4.a4d5cb2e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__Xxq0D\",\"error\":\"FormsControl_error__19rr4\",\"formSummaryError\":\"FormsControl_formSummaryError__2863-\"};","\nexport const requiredField = (value: string) => {\n    if (value) return undefined\n    return 'Field is required'\n}\nexport const maxLengthCreator = (maxLength: any) => (value: any) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\n    return undefined\n}\n","import React from \"react\";\nimport s from './FormsControl.module.css'\nimport {Field} from \"redux-form\";\n\ntype textAreaPropsType = {\n    input?: any\n    meta?: any\n}\nconst FormControl: React.FC<textAreaPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error\n    return (\n        <div className={s.formControl + ' ' + (hasError && s.error)}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea = (props: textAreaPropsType) => {\n    const {input, meta, ...restProps} = props\n    return <FormControl {...props}>\n        <textarea {...input} {...restProps}/>\n    </FormControl>\n}\n\nexport const Input = (props: textAreaPropsType) => {\n    const {input, meta, ...restProps} = props\n    return <FormControl {...props}>\n        <input {...input} {...restProps}/>\n    </FormControl>\n}\n\nexport const createField = (placeholder: string, name: string,\n                            component: (props: textAreaPropsType) => void,\n                            validate: any, props={}, text?: string) => (\n    <div>\n        <Field placeholder={placeholder}\n               name={name}\n               validate={validate}\n               component={component}\n               {...props}\n        />\n        {text}\n    </div>\n)","import React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {rootStateType} from \"../Redux/redux-store\";\nimport {connect} from \"react-redux\";\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\nconst mapStateToPropsForRedirect = (state: rootStateType): mapStateToPropsType => ({\n    isAuth: state.auth.isAuth\n})\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n\n    class RedirectComponent extends React.Component<mapStateToPropsType, any> {\n        render() {\n            let {isAuth, ...restProps} = this.props\n\n            if (!isAuth) return <Redirect to={'/login'}/>\n            return <Component {...restProps as T}/>\n        }\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n\n    return ConnectedAuthRedirectComponent\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"discriptionBlock\":\"ProfileInfo_discriptionBlock__3HzxI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"Posts_posts__1djyJ\",\"message\":\"Posts_message__INLz4\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {updateStatusTC} from \"../../../Redux/profile-reducer\";\n\ntype profileStatusType = {\n    status: string\n}\n\nconst ProfileStatusWithHooks: React.FC<profileStatusType> = ({status}) => {\n    const dispatch = useDispatch()\n    const [editMode, setEditMode] = useState(false)\n    const [value, setValue] = useState(status)\n    useEffect(() => {\n        setValue(status)\n    },[status])\n    const activateMode = () => {\n        setEditMode(true)\n    }\n    const deactivatedEditMode = () => {\n        setEditMode(false)\n        dispatch(updateStatusTC(value))\n    }\n    const onStatusCHanged = (e: ChangeEvent<HTMLInputElement>) => {\n        setValue(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            {\n                !editMode &&\n                <div><span onDoubleClick={activateMode}>{status || 'НЕТ СТАТУСА!!!!!!'}</span></div>\n            }\n            {\n                editMode &&\n                <div>\n                    <input type=\"text\"\n                           value={value}\n                           onChange={onStatusCHanged}\n                           onDoubleClick={activateMode}\n                           autoFocus\n                           onBlur={deactivatedEditMode}/>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks","import React from \"react\";\nimport s from './ProfileInfo.module.css'\nimport Preloader from \"../../Common/Preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\n\n\ntype profileInfoType = {\n    profile: any\n    status: string\n}\n\nfunction ProfileInfo(props: profileInfoType) {\n\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    return (\n        <div>\n            <div className={s.discriptionBlock}>\n                <img src={props.profile.photos.large} alt=\"profile\"/>\n                <ProfileStatusWithHooks status={props.status}/>\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileInfo","import React from \"react\";\nimport s from './Post.module.css'\n\ntype PostType = {\n    message: string\n    likeCounts: number\n}\n\nfunction Post(props: PostType) {\n\n    return (\n        <div className={s.item}>\n            <img src=\"https://a.d-cd.net/jgAAAgJusuA-200.jpg\" alt='logo'/>\n            {props.message}\n            <div>\n                <span>like: {props.likeCounts}</span>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Post","import React from \"react\";\nimport Post from \"./Post/Post\";\nimport s from './Posts.module.css'\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validator\";\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\nimport {postsType} from \"../../../types/types\";\n\n\ntype myPostsType = {\n    posts: Array<postsType>\n    addPost: (values: string) => void\n}\n\n\nconst MyPosts = React.memo((props: myPostsType) => {\n    console.log('yo')\n    let postsElements = props.posts.map(p => <Post message={p.message}\n                                                   likeCounts={p.likesCount}\n                                                   key={p.id}\n    />)\n\n    const addPost = (values: AddNewPostFormType) => {\n        props.addPost(values.newPostText)\n    }\n\n    return (\n        <div className={s.posts}>\n            <div>\n                <AddNewPostFormRedux onSubmit={addPost}/>\n            </div>\n            <div className={s.message}>\n                {postsElements}\n            </div>\n        </div>\n    )\n})\n\nconst maxLength10 = maxLengthCreator(10)\ntype AddNewPostFormType = {\n    newPostText: string\n}\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\n    return (\n        <div>\n            <form onSubmit={props.handleSubmit}>\n                <Field name='newPostText' component={Textarea} validate={[requiredField, maxLength10]}\n                       placeholder='post message'/>\n                <div>\n                    <button>Add post</button>\n                </div>\n            </form>\n\n        </div>\n    )\n}\nconst AddNewPostFormRedux = reduxForm<AddNewPostFormType>({form: 'AddNewPostForm'})(AddNewPostForm)\n\nexport default MyPosts","import {Dispatch} from \"react\";\nimport {addPostAC} from \"../../../Redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {actionsType, rootStateType} from \"../../../Redux/redux-store\";\n\n\nconst mapStateToProps = (state: rootStateType) => {\n\n    return {\n        posts: state.profilePage.posts,\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch<actionsType> ) => {\n    return {\n        addPost: (values: string) => {\n            dispatch(addPostAC(values))\n        }\n    }\n}\n\nconst MyPostsContainer = connect<any,any,any,any >(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer","import React from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\ntype profileType = {\n    profile: any\n    status: string\n}\n\nfunction Profile(props: profileType) {\n    return (\n        <div>\n            <ProfileInfo profile={props.profile} status={props.status}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\n\nexport default Profile","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatusTC, getUserProfile, setUserProfile, updateStatusTC} from \"../../Redux/profile-reducer\";\nimport {rootStateType} from \"../../Redux/redux-store\";\nimport {withRouter} from \"react-router\";\nimport {compose} from \"redux\";\nimport {withAuthRedirect} from \"../../hok/withAuthRedirect\";\n\nclass ProfileContainer extends React.Component<any, any> {\n\n    componentDidMount() {\n        let userId: number = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId\n        }\n        this.props.getUserProfile(userId)\n        this.props.getStatusTC(userId)\n    }\n\n    render() {\n        return (\n            <div>\n                <Profile {...this.props} profile={this.props.profile} status={this.props.status}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: rootStateType) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\nexport default compose<any>(withAuthRedirect, connect(mapStateToProps, {\n        setUserProfile,\n        getUserProfile,\n        getStatusTC,\n    }),\n    withRouter)(ProfileContainer)\n"],"sourceRoot":""}