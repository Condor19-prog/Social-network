{"version":3,"sources":["components/Common/FormsControls/FormsControl.module.css","utils/validators/validator.ts","components/Common/FormsControls/FormsControls.tsx","components/Login/Login.tsx"],"names":["module","exports","requiredField","value","maxLengthCreator","maxLength","length","FormControl","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","component","validate","text","connect","state","isAuth","auth","loginTC","dispatch","useDispatch","to","LoginReduxForm","onSubmit","formData","email","password","rememberMe","reduxForm","form","handleSubmit","type","formSummaryError"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB,yC,iCCAzH,oEAAO,IAAMC,EAAgB,SAACC,GAC1B,IAAIA,EACJ,MAAO,qBAEEC,EAAmB,SAACC,GAAD,OAAoB,SAACF,GACjD,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,oMCE5BE,EAA2C,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SACjEC,EAAWH,GAAWC,EAC5B,OACI,sBAAKG,UAAWC,IAAEC,YAAc,KAAOH,GAAYE,IAAEJ,OAArD,UACI,8BACKC,IAEJC,GAAY,+BAAOF,QAKnBM,EAAW,SAACC,GAA8B,IAC5CC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KADoC,YACdS,EADc,mBAElD,OAAO,cAACV,EAAD,2BAAiBU,GAAjB,aACH,oDAAcC,GAAWC,QAIpBC,EAAQ,SAACH,GAA8B,IACzCC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KADiC,YACXS,EADW,mBAE/C,OAAO,cAACV,EAAD,2BAAiBU,GAAjB,aACH,iDAAWC,GAAWC,QAIjBE,EAAc,SAACC,EAAqBC,EACrBC,EACAC,GAFD,IAEgBR,EAFhB,uDAEsB,GAAIS,EAF1B,8CAGvB,gCACI,cAAC,IAAD,aAAOJ,YAAaA,EACbC,KAAMA,EACNE,SAAUA,EACVD,UAAWA,GACPP,IAEVS,O,6KCXMC,uBAHS,SAACC,GAAD,MAA2B,CAC/CC,OAAQD,EAAME,KAAKD,UAEiB,CAACE,aAA1BJ,EAnBoB,SAAC,GAAc,IAAbE,EAAY,EAAZA,OAC3BG,EAAWC,cAKjB,OAAIJ,EACO,cAAC,IAAD,CAAUK,GAAI,aAGrB,gCACI,uCACA,cAACC,EAAD,CAAgBC,SATP,SAACC,GACdL,EAASD,YAAQM,EAASC,MAAOD,EAASE,SAAUF,EAASG,sBAuBrE,IA2BaL,EAAiBM,YAAwB,CAACC,KAAM,SAA/BD,EA3B+B,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcjC,EAAW,EAAXA,MACzE,OACI,8BACI,uBAAM0B,SAAUO,EAAhB,UACKtB,YAAY,QAAS,QAASD,IAAMlB,IAAe,CAAC0C,KAAM,SAC1DvB,YAAY,WAAY,WAAYD,IAAMlB,IAAe,CAAC0C,KAAM,aAChEvB,YAAY,GAAI,aAAcD,IAAM,KAAM,CAACwB,KAAM,YAAa,cAU9DlC,GAAS,qBAAKG,UAAWC,IAAE+B,iBAAlB,mBACV,8BACI","file":"static/js/6.51492640.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__Xxq0D\",\"error\":\"FormsControl_error__19rr4\",\"formSummaryError\":\"FormsControl_formSummaryError__2863-\"};","\nexport const requiredField = (value: string) => {\n    if (value) return undefined\n    return 'Field is required'\n}\nexport const maxLengthCreator = (maxLength: any) => (value: any) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\n    return undefined\n}\n","import React from \"react\";\nimport s from './FormsControl.module.css'\nimport {Field} from \"redux-form\";\n\ntype textAreaPropsType = {\n    input?: any\n    meta?: any\n}\nconst FormControl: React.FC<textAreaPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error\n    return (\n        <div className={s.formControl + ' ' + (hasError && s.error)}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea = (props: textAreaPropsType) => {\n    const {input, meta, ...restProps} = props\n    return <FormControl {...props}>\n        <textarea {...input} {...restProps}/>\n    </FormControl>\n}\n\nexport const Input = (props: textAreaPropsType) => {\n    const {input, meta, ...restProps} = props\n    return <FormControl {...props}>\n        <input {...input} {...restProps}/>\n    </FormControl>\n}\n\nexport const createField = (placeholder: string, name: string,\n                            component: (props: textAreaPropsType) => void,\n                            validate: any, props={}, text?: string) => (\n    <div>\n        <Field placeholder={placeholder}\n               name={name}\n               validate={validate}\n               component={component}\n               {...props}\n        />\n        {text}\n    </div>\n)","import React from \"react\";\nimport {connect, useDispatch} from \"react-redux\";\nimport {loginTC} from \"../../Redux/auth-reducer\";\nimport {Redirect} from \"react-router-dom\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, Input} from \"../Common/FormsControls/FormsControls\";\nimport {requiredField} from \"../../utils/validators/validator\";\nimport {rootStateType} from \"../../Redux/redux-store\";\nimport s from '../Common/FormsControls/FormsControl.module.css'\n\ntype loginType = {\n    isAuth: boolean\n}\n\nconst Login: React.FC<loginType> = ({isAuth}) => {\n    const dispatch = useDispatch()\n\n    const onSubmit = (formData: formDataType) => {\n        dispatch(loginTC(formData.email, formData.password, formData.rememberMe))\n    }\n    if (isAuth) {\n        return <Redirect to={'/Profile'}/>\n    }\n    return (\n        <div>\n            <h1>Login</h1>\n            <LoginReduxForm onSubmit={onSubmit}/>\n        </div>\n    )\n}\nconst mapStateToProps = (state: rootStateType) => ({\n    isAuth: state.auth.isAuth\n})\nexport default connect(mapStateToProps, {loginTC})(Login)\n\nexport type formDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\nconst LoginForm: React.FC<InjectedFormProps<formDataType>> = ({handleSubmit, error}) => {\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                {createField('Email', 'email', Input,requiredField, {type: 'text'})}\n                {createField('Password', 'password', Input,requiredField, {type: 'password'})}\n                {createField('', 'rememberMe', Input,null, {type: 'checkbox'}, 'rememberMe')}\n                {/*<Field placeholder={'email'}*/}\n                {/*       name={'email'}*/}\n                {/*       component={Input}*/}\n                {/*       validate={[requiredField]}/>*/}\n                {/*<div>*/}\n                {/*    <Field type=\"checkbox\"*/}\n                {/*           name={'rememberMe'}*/}\n                {/*           component={Input}/>Remember Me*/}\n                {/*</div>*/}\n                {error && <div className={s.formSummaryError}>Error</div>}\n                <div>\n                    <button>\n                        Login\n                    </button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport const LoginReduxForm = reduxForm<formDataType>({form: 'login'})(LoginForm)\n\n"],"sourceRoot":""}