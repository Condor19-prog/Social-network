{"version":3,"sources":["components/Common/FormsControls/FormsControl.module.css","utils/validators/validator.ts","components/Common/FormsControls/FormsControls.tsx","hok/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/AddMessagesForm/AddMessagesForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","requiredField","value","maxLengthCreator","maxLength","length","FormControl","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","component","validate","text","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","to","React","connect","Message","message","DialogItem","path","id","dialogItem","maxLength50","reduxForm","form","onSubmit","handleSubmit","Field","send","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","compose","dialogPage","dispatch","sendMessageAC"],"mappings":"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","file":"static/js/5.1614321a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__Xxq0D\",\"error\":\"FormsControl_error__19rr4\",\"formSummaryError\":\"FormsControl_formSummaryError__2863-\"};","\nexport const requiredField = (value: string) => {\n    if (value) return undefined\n    return 'Field is required'\n}\nexport const maxLengthCreator = (maxLength: any) => (value: any) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\n    return undefined\n}\n","import React from \"react\";\nimport s from './FormsControl.module.css'\nimport {Field} from \"redux-form\";\n\ntype textAreaPropsType = {\n    input?: any\n    meta?: any\n}\nconst FormControl: React.FC<textAreaPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error\n    return (\n        <div className={s.formControl + ' ' + (hasError && s.error)}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea = (props: textAreaPropsType) => {\n    const {input, meta, ...restProps} = props\n    return <FormControl {...props}>\n        <textarea {...input} {...restProps}/>\n    </FormControl>\n}\n\nexport const Input = (props: textAreaPropsType) => {\n    const {input, meta, ...restProps} = props\n    return <FormControl {...props}>\n        <input {...input} {...restProps}/>\n    </FormControl>\n}\n\nexport const createField = (placeholder: string, name: string,\n                            component: (props: textAreaPropsType) => void,\n                            validate: any, props={}, text?: string) => (\n    <div>\n        <Field placeholder={placeholder}\n               name={name}\n               validate={validate}\n               component={component}\n               {...props}\n        />\n        {text}\n    </div>\n)","import React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {rootStateType} from \"../Redux/redux-store\";\nimport {connect} from \"react-redux\";\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\nconst mapStateToPropsForRedirect = (state: rootStateType): mapStateToPropsType => ({\n    isAuth: state.auth.isAuth\n})\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n\n    class RedirectComponent extends React.Component<mapStateToPropsType, any> {\n        render() {\n            let {isAuth, ...restProps} = this.props\n\n            if (!isAuth) return <Redirect to={'/login'}/>\n            return <Component {...restProps as T}/>\n        }\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n\n    return ConnectedAuthRedirectComponent\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"dialogItem\":\"Dialogs_dialogItem__1AD6j\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\",\"textarea\":\"Dialogs_textarea__PRKXN\",\"send\":\"Dialogs_send__30Ki6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItem\":\"DialogItem_dialogItem__2RuWv\"};","import React from \"react\";\nimport s from './../Dialogs.module.css'\n\n\ntype MessageType = {\n    message: string\n}\n\nfunction Message(props: MessageType) {\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n}\n\n\nexport default Message","import React from \"react\";\nimport s from './DialogItem.module.css'\nimport {NavLink} from \"react-router-dom\";\n\n\ntype dialogsType = {\n    id: string\n    name: string\n}\n\nfunction DialogItem(props: dialogsType) {\n    const path = '/Dialogs/' + props.id\n\n    return (\n        <div className={s.dialogItem}>\n            <NavLink to={path} >{props.name}</NavLink>\n        </div>\n    )\n}\n\n\nexport default DialogItem","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport s from \"../Dialogs.module.css\";\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validator\";\n\nexport type addMessageFormType = {\n    newMessageBody: string\n}\nconst maxLength50 = maxLengthCreator(50)\n\nconst AddMessageForm: React.FC<InjectedFormProps<addMessageFormType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field component={Textarea}\n                   validate={[requiredField, maxLength50]}\n                   name='newMessageBody'\n                   placeholder='Enter your message'/>\n            <div>\n                <button className={s.send}>send</button>\n            </div>\n        </form>\n    )\n}\nexport default reduxForm<addMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from \"react\";\nimport s from './Dialogs.module.css'\nimport Message from \"./Message/Message\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport {dialogPageType} from \"../../Redux/redux-store\";\nimport AddMessageForm, {addMessageFormType} from \"./AddMessagesForm/AddMessagesForm\";\n\n\ntype dialogsPropsType = {\n    dialogsPage: dialogPageType\n    sendMessage: (values: any) => void\n    isAuth: boolean\n}\n\nfunction Dialogs(props: dialogsPropsType) {\n    const dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem id={d.id} name={d.name} key={d.id}/>)\n    const messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id}/>)\n\n    const addNewMessage = (values: addMessageFormType) => {\n        props.sendMessage(values.newMessageBody)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n            </div>\n            <AddMessageForm onSubmit={addNewMessage}/>\n        </div>\n    )\n}\n\nexport default Dialogs","import {Dispatch} from \"react\";\nimport {sendMessageAC} from \"../../Redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {actionsType, rootStateType} from \"../../Redux/redux-store\";\nimport {withAuthRedirect} from \"../../hok/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\nconst mapStateToProps = (state: rootStateType) => {\n    return {\n        dialogsPage: state.dialogPage,\n    }\n}\nconst mapDispatchTpProps = (dispatch: Dispatch<actionsType>) => {\n    return {\n        sendMessage: (newMessageBody: string) => {\n            dispatch(sendMessageAC(newMessageBody))\n        }\n    }\n}\n\nexport default compose<any>(connect(\n    mapStateToProps, mapDispatchTpProps),\n    withAuthRedirect)\n(Dialogs)"],"sourceRoot":""}